type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   index: nat;
   key: text;
 };
type StreamingCallbackHttpResponse = record {body: vec nat8;};
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Chunk = 
 record {
   batch_id: nat;
   content: vec nat8;
 };
service : {
  commit_batch:
   (record {
      batch_id: nat;
      chunk_ids: vec nat;
      content_type: text;
    }) -> ();
  create_batch: () -> (record {batch_id: nat;});
  create_chunk: (Chunk) -> (record {chunk_id: nat;});
  http_request: (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback: (StreamingCallbackToken) ->
   (StreamingCallbackHttpResponse) query;
}
